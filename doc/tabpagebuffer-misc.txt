*tabpagebuffer-misc.txt*			*tabpagebuffer-misc*

Version: 1.1.0
Author : DeaR <nayuri@kuonn.mydns.jp>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions: The
    above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS					*tabpagebuffer-misc-contents*

INTRODUCTION				|tabpagebuffer-misc-introduction|
REQUIREMENTS				|tabpagebuffer-misc-requirements|
INTERFACE					|tabpagebuffer-misc-interface|
  VARIABLES					|tabpagebuffer-misc-variables|
  COMMANDS					|tabpagebuffer-misc-commands|
  FUNCTIONS					|tabpagebuffer-misc-functions|
ERROR CODE					|tabpagebuffer-misc-errorcode|
CHANGELOG					|tabpagebuffer-misc-changelog|


==============================================================================
INTRODUCTION				*tabpagebuffer-misc-introduction*

To control the buffer belonging to the tab page.


==============================================================================
REQUIREMENTS				*tabpagebuffer-misc-requirements*

- |tabpagebuffer| or |ctrlspace|

|tabpagebuffer| <https://github.com/Shougo/tabpagebuffer.vim>
|ctrlspace|     <http://www.vim.org/scripts/script.php?script_id=4789>


==============================================================================
INTERFACE					*tabpagebuffer-misc-interface*
------------------------------------------------------------------------------
VARIABLES					*tabpagebuffer-misc-variables*

				*g:tabpagebuffer#misc#delete_keeptabpage*
g:tabpagebuffer#command#bdelete_keeptabpage
	If this variable is 1, |:TpbDelete|, |:TpbWipeout|, |:TpbUnload|,
	|:TpbDeleteAll|, |:TpbWipeoutAll|, |:TpbUnloadAll| keep current tab
	page.

	The default value is 0.


------------------------------------------------------------------------------
COMMANDS					*tabpagebuffer-misc-commands*

:TpbFiles[!]				*:TpbFiles* *:TpbBuffers* *:TpbLs*
:TpbBuffers[!]
:TpbLs[!]
	Show all buffers belonging to the current tab page.
	Also see |:files||, |:buffers|, |:ls|.


:[N]TpbDelete[!] [N]						*:TpbDelete*
:TpbDelete[!] {bufname}
:TpbDelete[!] N1 N2 ...
:N,MTpbDelete[!]
	If buffer [N] (default: current buffer) belonging to the current tab
	page, be delete it.
	Also see |:bdelete|.

:[N]TpbWipeout[!] [N]						*:TpbWipeout*
:TpbWipeout[!] {bufname}
:TpbWipeout[!] N1 N2 ...
:N,MTpbWipeout[!]
	If buffer [N] (default: current buffer) belonging to the current tab
	page, be really delete it.
	Also see |:bwipeout|.

:[N]TpbUnload[!] [N]						*:TpbUnload*
:TpbUnload[!] {bufname}
:TpbUnload[!] N1 N2 ...
:N,MTpbUnload[!]
	If buffer [N] (default: current buffer) belonging to the current tab
	page, be unload it.
	Also see |:bunload|.


:[N]TpbDeleteAll[!] [N]					*:TpbDeleteAll*
	Delete all buffers belonging to the current tab page.  When a count is
	given, this is the maximum number of buffers to delete.

:[N]TpbWipeoutAll[!] [N]				*:TpbWipeoutAll*
	Really delete all buffers belonging to the current tab page.  When a
	count is given, this is the maximum number of buffers to really
	delete.

:[N]TpbUnloadAll[!] [N]					*:TpbUnloadAll*
	Unload all buffers belonging to the current tab page.  When a count is
	given, this is the maximum number of buffers to unload.


:[N]TpbBuffer[!] [+cmd] [N]					*:TpbBuffer*
:TpbBuffer[!] [+cmd] {bufname}
	Edit buffer [N] (default: current buffer) belonging to
	the current tab page.
	Also see |:buffer|, |+cmd|.

:[N]STpbBuffer [+cmd] [N]					*:STpbBuffer*
:STpbBuffer [+cmd] {bufname}
	Split window and edit buffer [N] belonging to the current tab page.
	Also see |:sbuffer|, |+cmd|.

:[N]VTpbBuffer [+cmd] [N]					*:VTpbBuffer*
:VTpbBuffer [+cmd] {bufname}
	Split vertically and edit buffer [N] belonging to the current tab
	page.
	Also see |+cmd|.

:[N]TTpbBuffer [+cmd] [N]					*:TTpbBuffer*
:TTpbBuffer [+cmd] {bufname}
	Open a new tab page and edit buffer [N] belonging to the current tab
	page.
	Also see |+cmd|.


:[N]TpbNext[!] [+cmd] [N]					*:TpbNext*
	Go to [N]th next buffer belonging to the current tab page.
	Also see |:bnext|, |+cmd|.

:[N]TpbPrevious[!] [+cmd] [N]					*:TpbPrevious*
	Go to [N]th previous buffer belonging to the current tab page.
	Also see |:bprevious|, |+cmd|.

:[N]TpbModified[!] [+cmd] [N]		*:TpbModified* *:TpbModifiedNext*
:[N]TpbModifiedNext[!] [+cmd] [N]
	Go to [N]th next modified buffer belonging to the current tab page.
	Also see |:bmodified|, |+cmd|.

:[N]TpbModifiedPrevious[!] [+cmd] [N]			*:TpbModifiedPrevious*
	Go to [N]th previous modified buffer belonging to the current tab
	page.
	Also see |+cmd|.


:[N]STpbNext [+cmd] [N]						*:STpbNext*
	Split window and go to [N]th next buffer belonging to the current tab
	page.
	Also see |:sbnext|, |+cmd|.

:[N]STpbPrevious [+cmd] [N]				*:STpbPrevious*
	Split window and go to [N]th previous buffer belonging to the current
	tab page.
	Also see |:sbprevious|, |+cmd|.

:[N]STpbModified [+cmd] [N]		*:STpbModified* *:STpbModifiedNext*
:[N]STpbModifiedNext [+cmd] [N]
	Split window and go to [N]th next modified buffer belonging to the
	current tab page.
	Also see |:sbmodified|, |+cmd|.

:[N]STpbModifiedPrevious [+cmd] [N]		*:STpbModifiedPrevious*
	Split window and go to [N]th previous modified buffer belonging to the
	current tab page.
	Also see |+cmd|.


:[N]VTpbNext [+cmd] [N]						*:VTpbNext*
	Split vertically and go to [N]th next buffer belonging to the current
	tab page.
	Also see |+cmd|.

:[N]VTpbPrevious [+cmd] [N]				*:VTpbPrevious*
	Split vertically and go to [N]th previous buffer belonging to the
	current tab page.
	Also see |+cmd|.

:[N]VTpbModified [+cmd] [N]		*:VTpbModified* *:VTpbModifiedNext*
:[N]VTpbModifiedNext [+cmd] [N]
	Split vertically and go to [N]th next modified buffer belonging to the
	current tab page.
	Also see |+cmd|.

:[N]VTpbModifiedPrevious [+cmd] [N]		*:VTpbModifiedPrevious*
	Split vertically and go to [N]th previous modified buffer belonging to
	the current tab page.
	Also see |+cmd|.


:[N]TTpbNext [+cmd] [N]						*:TTpbNext*
	Open a new tab page and go to [N]th next buffer belonging to the
	current tab page.
	Also see |+cmd|.

:[N]TTpbPrevious [+cmd] [N]				*:TTpbPrevious*
	Open a new tab page and go to [N]th previous buffer belonging to the
	current tab page.
	Also see |+cmd|.

:[N]TTpbModified [+cmd] [N]		*:TTpbModified* *:TTpbModifiedNext*
:[N]TTpbModifiedNext [+cmd] [N]
	Open a new tab page and go to [N]th next modified buffer belonging to
	the current tab page.
	Also see |+cmd|.

:[N]TTpbModifiedPrevious [+cmd] [N]		*:TTpbModifiedPrevious*
	Open a new tab page and go to [N]th previous modified buffer in
	buffers only
	in the current tab page.
	Also see |+cmd|.


:TpbRewind[!] [+cmd]				*:TpbRewind* *:TpbFirst*
:TpbFirst[!] [+cmd]
	Go to first buffer belonging to the current tab page.
	Also see |:brewind|, |:bfirst|, |+cmd|.

:TpbLast[!] [+cmd]						*:TpbLast*
	Go to last buffer belonging to the current tab page.
	Also see |:blast|, |+cmd|.

:TpbModifiedRewind[!] [+cmd]	*:TpbModifiedRewind* *:TpbModifiedFirst*
:TpbModifiedFirst[!] [+cmd]
	Go to first modified buffer belonging to the current tab page.
	Also see |+cmd|.

:TpbModifiedLast[!] [+cmd]				*:TpbModifiedLast*
	Go to last modified buffer belonging to the current tab page.
	Also see |+cmd|.


:STpbRewind [+cmd]				*:STpbRewind* *:STpbFirst*
:STpbFirst [+cmd]
	Split window and go to first buffer belonging to the current tab page.
	Also see |:sbrewind|, |:sbfirst|, |+cmd|.

:STpbLast [+cmd]						*:STpbLast*
	Split window and go to last buffer belonging to the current tab page.
	Also see |:sblast|, |+cmd|.

:STpbModifiedRewind [+cmd]	*:STpbModifiedRewind* *:STpbModifiedFirst*
:STpbModifiedFirst [+cmd]
	Split window and go to first modified buffer belonging to the current
	tab page.
	Also see |+cmd|.

:STpbModifiedLast [+cmd]				*:STpbModifiedLast*
	Split window and go to last modified buffer belonging to the current
	tab page.
	Also see |+cmd|.


:VTpbRewind [+cmd]				*:VTpbRewind* *:VTpbFirst*
:VTpbFirst [+cmd]
	Split vertically and go to first buffer belonging to the current tab
	page.
	Also see |+cmd|.

:VTpbLast [+cmd]						*:VTpbLast*
	Split vertically and go to last buffer belonging to the current tab
	page.
	Also see |+cmd|.

:VTpbModifiedRewind [+cmd]	*:VTpbModifiedRewind* *:VTpbModifiedFirst*
:VTpbModifiedFirst [+cmd]
	Split vertically and go to first modified buffer belonging to the
	current tab page.
	Also see |+cmd|.

:VTpbModifiedLast [+cmd]				*:VTpbModifiedLast*
	Split vertically and go to last modified buffer belonging to the
	current tab page.
	Also see |+cmd|.


:TTpbRewind [+cmd]				*:TTpbRewind* *:TTpbFirst*
:TTpbFirst [+cmd]
	Open a new tab page and go to first buffer belonging to the current
	tab page.
	Also see |+cmd|.

:TTpbLast [+cmd]						*:TTpbLast*
	Open a new tab page and go to last buffer belonging to the current tab
	page.
	Also see |+cmd|.

:TTpbModifiedRewind [+cmd]	*:TTpbModifiedRewind* *:TTpbModifiedFirst*
:TTpbModifiedFirst [+cmd]
	Open a new tab page and go to first modified buffer belonging to the
	current tab page.
	Also see |+cmd|.

:TTpbModifiedLast [+cmd]				*:TTpbModifiedLast*
	Open a new tab page and go to last modified buffer belonging to the
	current tab page.
	Also see |+cmd|.


:[N]TpbUnhide [N]				*:TpbUnhide* *:STpbUnhide*
:[N]STpbUnhide [N]
	Rearrange the screen to open one window for each loaded buffer
	belonging to the current tab page.  When a count is given, this is the
	maximum number of windows to open.
	Also see |:unhide|, |:sunhide|.

:[N]VTpbUnhide [N]						*:VTpbUnhide*
	Rearrange the screen to open one vertically window for each loaded
	buffer belonging to the current tab page.  When a count is given, this
	is the maximum number of windows to open.

:[N]TTpbUnhide [N]						*:TTpbUnhide*
	Rearrange the screen to open one tab for each loaded buffer belonging
	to the current tab page.  When a count is given, this is the maximum
	number of windows to open.


:[N]TpbAll [N]						*:TpbAll* *:STpbAll*
:[N]STpbAll [N]
	Rearrange the screen to open one window for each buffer belonging to
	the current tab page.  When a count is given, this is the maximum
	number of windows to open.
	Also see |:unhide|, |:sunhide|.

:[N]VTpbAll [N]							*:VTpbAll*
	Rearrange the screen to open one vertically window for each buffer
	belonging to the current tab page.  When a count is given, this is the
	maximum number of windows to open.

:[N]TTpbAll [N]							*:TTpbAll*
	Rearrange the screen to open one tab for each buffer belonging to the
	current tab page.  When a count is given, this is the maximum number
	of windows to open.

------------------------------------------------------------------------------
FUNCTIONS					*tabpagebuffer-misc-functions*

					*tabpagebuffer#function#buflist()*
tabpagebuffer#function#buflist([{tabnr}])
	The result is a |List|, where each item is the number of the buffer
	belonging to the {tabnr}th tab page.  It contains |hidden-buffer| and
	|unlisted-buffer|.
	Also see |tabpagebuflist()|.

					*tabpagebuffer#function#bufexists()*
tabpagebuffer#function#bufexists({expr} [, {tabnr}])
	The result is a |Number|, which is non-zero if a buffer belonging to
	the {tabnr}th tab page called {expr} exists.
	If {expr} is |Number|, that buffer number's name is given.
	If {expr} is |String|, it must match a buffer name exactly.
	Also see |bufexists()|.

					*tabpagebuffer#function#bufname()*
tabpagebuffer#function#bufname({expr} [, {tabnr} [, {error}]])
	The result is the name of a buffer belonging to the {tabnr}th tab
	page.  When {error} is given, if the buffer doesn't exists, error
	occurred.
	If {expr} is a |Number|, that buffer number's name is given.
	If {expr} is a |String|, it is used as a |file-pattern| to match with
	the buffer names.
	Also see |bufname()|.

					*tabpagebuffer#function#bufnr()*
tabpagebuffer#function#bufnr({expr} [, {create} [, {tabnr} [, {error}]]])
	The result is the number of a buffer belonging to the {tabnr}th tab
	page.  When {error} is given, if the buffer doesn't exists, error
	occurred.
	If {expr} is a |Number|, that buffer number's name is given.
	If {expr} is a |String|, it is used as a |file-pattern| to match with
	the buffer names.
	Also see |bufnr()|.

					*tabpagebuffer#command#ls()*
tabpagebuffer#command#ls({command})
	Show all buffers belonging to the current tab page.
	{command} is used to show all buffers, e.g.: >
		:call tabpagebuffer#command#ls('ls!')
<	Also see |:TpbLs|.

					*tabpagebuffer#command#bdelete()*
tabpagebuffer#command#bdelete({command} [, {list}])
	If buffer of item in {list} (default: current buffer) belonging to the
	current tab page, be delete it.
	If item in {list} is a |Number|, that buffer number's name is given.
	If item in {list} is a |String|, it is used as a |file-pattern| to
	match with the buffer names.
	{command} is used to delete buffers, e.g.: >
		:call tabpagebuffer#command#bdelete(
		\ 'bwipeout!', [1, 2, 'foo', 3, 'bar', 4])
<	Also see |:TpbDelete|.

					*tabpagebuffer#command#bdelete_all()*
tabpagebuffer#command#bdelete_all({command} [, {count}])
	Delete all buffers belonging to the current tab page.  When {count} is
	given, this is the maximum number of buffers to delete.
	{command} is used to delete buffers, e.g.: >
		:call tabpagebuffer#command#bdelete_all(
		\ 'bwipeout!', 3)
<	Also see |:TpbDeleteAll|.

					*tabpagebuffer#command#buffer()*
tabpagebuffer#command#buffer({command} [, {expr}])
	Edit buffer {expr} (default: current buffer) belonging to the current
	tab page.
	If {expr} is a |Number|, that buffer number's name is given.
	If {expr} is a |String|, it is used as a |file-pattern| to match with
	the buffer names.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#buffer(
		\ 'vertical sbuffer +setf\ vim', 3)
<	Also see |:TpbBuffer|.

					*tabpagebuffer#command#next()*
tabpagebuffer#command#next({command} [, {count}])
	Go to {count}th next buffer belonging to the current tab page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#next(
		\ 'vertical sbuffer +setf\ vim', 3)
<	Also see |:TpbNext|.

					*tabpagebuffer#command#previous()*
tabpagebuffer#command#previous({command} [, {count}])
	Go to {count}th previous buffer belonging to the current tab page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#previsous(
		\ 'vertical sbuffer +setf\ vim', 3)
<	Also see |:TpbPrevious|.

				*tabpagebuffer#command#modified_next()*
tabpagebuffer#command#modified_next({command} [, {count}])
	Go to {count}th next modified buffer belonging to the current tab
	page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#modified_next(
		\ 'vertical sbuffer +setf\ vim', 3)
<	Also see |:TpbModifiedNext|.

				*tabpagebuffer#command#modified_previous()*
tabpagebuffer#command#modified_previous({command} [, {count}])
	Go to {count}th previous modified buffer belonging to the current tab
	page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#modified_previsous(
		\ 'vertical sbuffer +setf\ vim', 3)
<	Also see |:TpbModifiedPrevious|.

					*tabpagebuffer#command#first()*
tabpagebuffer#command#first({command})
	Go to first buffer belonging to the current tab page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#first(
		\ 'vertical sbuffer +setf\ vim')
<	Also see |:TpbFirst|.

					*tabpagebuffer#command#last()*
tabpagebuffer#command#last({command})
	Go to last buffer belonging to the current tab page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#last(
		\ 'vertical sbuffer +setf\ vim')
<	Also see |:TpbLast|.

				*tabpagebuffer#command#modified_first()*
tabpagebuffer#command#modified_first({command})
	Go to first modified buffer belonging to the current tab page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#modified_first(
		\ 'vertical sbuffer +setf\ vim')
<	Also see |:TpbModifiedFirst|.

				*tabpagebuffer#command#modified_last()*
tabpagebuffer#command#modified_last({command})
	Go to last modified buffer belonging to the current tab page.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#modified_last(
		\ 'vertical sbuffer +setf\ vim')
<	Also see |:TpbModifiedLast|.

					*tabpagebuffer#command#unhide()*
tabpagebuffer#command#unhide({command} [, {count}])
	Rearrange the screen to open one window for each loaded buffer
	belonging to the current tab page.  When a {count} is given, this is
	the maximum number of windows to open.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#unhide(
		\ 'vertical sbuffer', 10)
<	Also see |:TpbUnhide|.

					*tabpagebuffer#command#ball()*
tabpagebuffer#command#ball({command} [, {count}])
	Rearrange the screen to open one window for each buffer belonging to
	the current tab page.  When a {count} is given, this is the maximum
	number of windows to open.
	{command} is used to open buffer, e.g.: >
		:call tabpagebuffer#command#ball(
		\ 'vertical sbuffer', 10)
<	Also see |:TpbAll|.


==============================================================================
ERROR CODE					*tabpagebuffer-misc-errorcode*

|E84|:	No modified buffer found
|E87|:	Cannot go beyond last buffer
|E88|:	Cannot go before first buffer
|E93|:	More than one match for `expr`
|E94|:	No matching buffer for `expr`
|E488|:	Trailing characters
|E515|:	No buffers were unloaded
|E516|:	No buffers were deleted
|E517|:	No buffers were wiped out

								*ETPB101*
ETPB101:	tabpagebuffer or ctrlspace plugin is not installed
	Please install |tabpagebuffer| or |ctrlspace|.
	Also see |tabpagebuffer-misc-requirements|.


==============================================================================
CHANGELOG					*tabpagebuffer-misc-changelog*

1.1.0	Re-create.
1.0.0	First version.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
